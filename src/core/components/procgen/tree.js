var tree = new Tree({
        "seed": 61,
            "segments": 10,
            "levels": 5,
            "vMultiplier": 0.66,
            "twigScale": 0.47,
            "initalBranchLength": 0.5,
            "lengthFalloffFactor": 0.85,
            "lengthFalloffPower": 0.99,
            "clumpMax": 0.449,
            "clumpMin": 0.404,
            "branchFactor": 3.75,
            "dropAmount": 0.07,
            "growAmount": -0.005,
            "sweepAmount": 0.01,
            "maxRadius": 0.269,
            "climbRate": 0.626,
            "trunkKink": 0.108,
            "treeSteps": 4,
            "taperRate": 0.876,
            "radiusFalloffRate": 0.66,
            "twistRate": 2.7,
            "trunkLength": 1.55,
            "trunkMaterial": "TrunkType2",
            "twigMaterial": "BranchType5"
    });

    scene = new THREE.Scene();

    camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 10000);
    camera.position.z = 500;
    scene.add(camera);
    var texturepath = 0;

    var model = {
        "metadata": {
            "formatVersion": 3.1,
                "generatedBy": "bb3d2proctree",
                "vertices": 0,
                "faces": 0,
                "description": "Autogenerated from proctree."
        },
            "materials": [{ // just testing...
            "diffuse": 20000
        }],
            "colors": [0xff00ff, 0xff0000] // just testing
    };

    model.vertices = Tree.flattenArray(tree.verts);
    model.normals = Tree.flattenArray(tree.normals);
    model.uvs = [Tree.flattenArray(tree.UV)];

    // model.faces    = Tree.flattenArray(tree.faces);
    model.faces = [];
    for (var i = 0; i < tree.faces.length; i++) {
        var face = tree.faces[i];
        model.faces.push(0);
        model.faces.push(face[0]); // v1
        model.faces.push(face[1]); // v2
        model.faces.push(face[2]); // v3
    }
    // should we do something about the faces?
    if (window.console) {
        window.console.log("faces from proctree look like this:");
        window.console.log(model.faces);
    }



    var loader = new THREE.JSONLoader();
    loader.createModel(model, function (geometry, materials) {

        // var mesh = new THREE.Mesh( geometry, materials[0]);
        mesh = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({
            color: 0xFF0000
        }));
        scene.add(mesh);

        var scale = 50;
        mesh.scale.x = mesh.scale.y = mesh.scale.z = scale;

        mesh.updateMatrix();

        // cb();
    }, texturepath);
